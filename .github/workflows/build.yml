name: Build Executables

on:
  push:
    branches:
      - development  # Trigger when pushing to the 'development' branch

permissions:
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ${{ matrix.os }}  # Run on each OS in the matrix

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # Only build on Linux and Windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build the executable with PyInstaller
        run: |
          pyinstaller --onefile run_cyoag.py

      - name: List dist directory contents (Linux/macOS)
        if: runner.os != 'Windows'  # Only run this on Linux/macOS
        run: |
          ls -alh dist/

      - name: List dist directory contents (Windows)
        if: runner.os == 'Windows'  # Only run this on Windows
        run: |
          Get-ChildItem dist

      - name: Archive the executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mv dist/run_cyoag cyoag-linux  # Rename executable if needed for clarity
          tar -czf cyoag-linux.tar.gz cyoag-linux  # Archive Linux executable

      - name: Archive the executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          move dist\run_cyoag.exe cyoag-windows.exe   # Rename Windows executable
          zip cyoag-windows.zip cyoag-windows.exe  # Zip the Windows executable

      - name: Upload Executable Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cyoag-executables
          path: |
            cyoag-linux.tar.gz
            cyoag-windows.zip

      - name: Get latest tag and increment version
        id: get_version
        run: |
          latest_tag=$(git tag -l | sort -V | tail -n 1)
          echo "Latest tag: $latest_tag"

          # Split the version string into an array by '.' separator
          version_parts=(${latest_tag//./ })

          # If no valid tag is found, initialize to v1.0.-1 (this ensures the first increment will make it v1.0.0)
          if [[ ${#version_parts[@]} -eq 0 ]]; then
            version_parts=("1" "0" "-1")  # Start with v1.0.-1
          fi

          # Increment the patch version
          new_patch_version=$((version_parts[2] + 1))

          # Create the new tag
          new_tag="v${version_parts[0]}.${version_parts[1]}.$new_patch_version"

          # Check if the tag already exists
          if git rev-parse "$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists. Skipping tag creation."
          else
            echo "New tag: $new_tag"
            # Create the new tag
            git tag -a $new_tag -m "Release version $new_tag"
            # Push the new tag to GitHub
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} --tags
          fi

          # Set output variable for next steps
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch existing tags to ensure we're working with the latest
        run: |
          git fetch --tags

      - name: Create a new Git tag
        run: |
          # Create a new tag with the incremented version
          git tag -a $new_tag -m "Release version $new_tag"

          # Push the new tag to GitHub
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} --tags

      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            cyoag-linux.tar.gz
            cyoag-windows.zip
          tag_name: $new_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required to create a release and upload files